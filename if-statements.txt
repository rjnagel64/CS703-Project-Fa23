
x = 32;
y = 3;
if x > 17 then
  print 9;
  y = y * 3;
else
  y = y - 1;
  print 10;
end
print 11;
print y;


How shall this be converted to an egraph?
How are the values of y reconciled in the exit block?
How are different IO operations sequenced?



@0: 32
@1: 3
@2: 17
@3: @0 > @2

@4: if @3 [[print 9; y = y * 3;]] [[y = y - 1; print 10;]]


include a "then branch" IO op?
IO-Init >>branch(x > 17) { _ >>print 9; ... } { ...; _ >>print 10 }

maybe >>branch "returns" the values of variables live at the end of the branch?
kind of a "conditional"/"select" node?
But what if there are multiple variables returned? ... return a tuple? (Seems too FP, but maybe.)



idea: if-stmt normally does not return a value. vars in successor need to know pred to select correct value.
therefore: if-expr produced by lowering if-stmt to egraph evaluates to a "predecessor label".
successors make use of "select" operations that are keyed by the predecessor label produced by the if-stmtexpr

thanks to e-graphs, the same if-stmtexpr can be passed to every select operation without duplicating everything.

somehow figure out what to do with the IO token as it passes into/out of the branches.




Hmm. What if both branches have their IO depend on the current IO root, and
then I have a 'select' node at the end keyed by the branch condition to decide
which branch to pull from?

@0: IO-Init
@1: 32 // x
@2: 3 // y
@3: 17
@4: @1 > @3 // x > 17

// true branch
@5: 9
@6: @0 >>print @5 // print(@0, 9)
@7: @1 * @2 // y_true = y * 3

// false branch
@8: 1
@9: @1 - @8 // y_false = y - 1
@10: 10
@11: @0 >>print @10 // print(@0, 10)

@12: select(@4, @6, @11) // io_root_post = phi(@6 <- true, @11 <- false)
@13: select(@4, @7, @9) // y_post = phi(y_true <- true, y_false <- false)
@14: 11
@15: @12 >>print @14 // print(io_root_post, 11)
@16: @15 >>print @13 // print(@15, y_post)


Yes. This looks pretty good. For the program-to-egraph part, anyway.
Now, how to I rematerialize this program from the egraph? Turning each 'select'
into its own if-statement + assignment seems like it would pessimize rather
than optimize. Maybe recognize that both 'selects' are keyed on @4, so they
should both be materialized as a single if-statement?
